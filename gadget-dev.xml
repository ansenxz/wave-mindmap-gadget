<Module>
  <ModulePrefs title="Mind-mapping">
    <Require feature="wave" />
    <Require feature="dynamic-height" />
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
      <style type="text/css">
        #contents {
          font-family: arial, sans-serif;
          font-size: 12px;
        }
        .link-like {
          color: #003EA8;
          cursor: pointer;
          text-decoration: underline;
        }
        #nodeInput {
          display: none;
          position: absolute;
        }
        #scrollingContainer {
          with: 100%;
          overflow-x: scroll;
        }
        #debug {
          display: none;
        }
      </style>
      <div id="contents">
        <input type="text" id="nodeInput" />
        <div id="scrollingContainer">
          <canvas id="canvas" width="1000" height="150"></canvas>
        </div>
        <div class="link-like" onclick="toggleDebugVisibility()">toggle debug output</div>
        <div id="debug">
          <input type="button" value="reset state" id="debugReset" />
          <input type="button" value="clear console" id="clearConsole" />
          <div id="console"></div>
        </div>
      </div>
      <script type="text/javascript">
        // ---------------------------------------------------------------------
        // Global definitions and helpers
        // ---------------------------------------------------------------------
        DRAW_CONSTS = {
          LEVEL_HORIZ_SPACING: 50,
          LEVEL_VERT_SPACING: 5,
          NODE_CONTROL_RADIUS: 5,
          NODE_HEIGHT: 24,
          NODE_HIGHLIGHT_OFFSET: 2,
          NODE_PADDING: 7,
          NODE_WIDTH: 50,
          ORIGIN_DELTA_X: 20,
          ORIGIN_DELTA_Y: 20,
          VERTICAL_SPACING: 10
        };
        KEY_CODES = {
          ENTER: 13
        };
        COMMANDS = {
          'add_child': function(gadget, node) {
            return function() { gadget.addChild(node); };
          },
          'add_sibling': function(gadget, node) {
            return function() { gadget.addSibling(node); };
          },
          'remove_node': function(gadget, node) {
            return function() { gadget.removeNode(node); };
          }
        };
        CONTROL_BUILDERS = {
          'add_child': function(gadget, node) {
            return new NodeControl(node.view.x + node.view.width,
                                   node.view.y + node.view.height / 2,
                                   COMMANDS['add_child'](gadget, node),
                                   'add_child');
          },
          'add_sibling': function(gadget, node) {
            return new NodeControl(node.view.x + node.view.width / 2,
                                   node.view.y + node.view.height,
                                   COMMANDS['add_sibling'](gadget, node),
                                   'add_sibling');
          },
          'remove_node': function(gadget, node) {
            return new NodeControl(node.view.x, node.view.y,
                                   COMMANDS['remove_node'](gadget, node),
                                   'remove_node');
          }
        };
        STATE_VALUE_KEYS = {
          TREE_ROOT: 'root',
          SELECTED_NODE_PREFIX: 'selected_'
        };
        
        // TODO: actually depend on closure instead of copying code here
        function bind(fn, selfObj, var_args) {
          if (arguments.length > 2) {
            var boundArgs = Array.prototype.slice.call(arguments, 2);
            return function() {
              // Prepend the bound arguments to the current arguments.
              var newArgs = Array.prototype.slice.call(arguments);
              Array.prototype.unshift.apply(newArgs, boundArgs);
              return fn.apply(selfObj, newArgs);
            };
      
          } else {
            return function() {
              return fn.apply(selfObj, arguments);
            };
          }
        };

        // ---------------------------------------------------------------------
        // View helper objects.
        // ---------------------------------------------------------------------

        // Node controls

        function NodeControl(x, y, command, name) {
          this.x = x;
          this.y = y;
          this.command = command;
          this.name = name;
          this.radius = DRAW_CONSTS.NODE_CONTROL_RADIUS;
        }
        NodeControl.prototype.isInside = function(x, y) {
          return ((this.x - this.radius) <= x && (this.x + this.radius) >= x)
              && ((this.y - this.radius) <= y && (this.y + this.radius) >= y);
        };

        // Node data and view.

        function NodeView(x, y, width, height, levelHeight) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;

          // TODO: remove this hack, make buildView deal with this
          this.levelHeight = levelHeight;
        }
        
        function Node(id, text, parentNode, opt_children) {
          this.id = id;
          this.text = text;
          this.parentNode = parentNode;
          this.children = opt_children ? opt_children : new Array();
          this.view = undefined;
        }
        Node.prototype.serialize = function() {
          var childrenIds = '';
          for (var i = 0; i < this.children.length; i++) {
            childrenIds += this.children[i].id + ',';
          }
          return [this.text, childrenIds].join(';');
        };
        
        // ---------------------------------------------------------------------
        // The gadget.
        // ---------------------------------------------------------------------
        function Gadget() {
          this.canvas = document.getElementById('canvas');
          this.canvasContext = canvas.getContext('2d');
          this.nodeInput = document.getElementById('nodeInput');
          this.selectedNodeId = undefined;
        }

        // App lifecycle.

        Gadget.prototype.stateUpdated = function() {
          this.debugPrintState();
          this.resetTransientState();

          var serializedRoot = wave.getState().get(STATE_VALUE_KEYS.TREE_ROOT);
          if (serializedRoot) {
            this.treeRoot = this.deserialize(STATE_VALUE_KEYS.TREE_ROOT, undefined, serializedRoot);
          }
          var viewerSelectedNode =
              wave.getState().get(this.generateNodeSelectionKey(wave.getViewer()));
          if (viewerSelectedNode) {
            this.selectedNodeId = viewerSelectedNode;
          }
          
          this.render();
        };
        Gadget.prototype.resetTransientState = function() {
          this.treeRoot = new Node(STATE_VALUE_KEYS.TREE_ROOT, 'default root', undefined);
          this.controls = new Array();
          this.selectedNodeId = undefined;
        };
        Gadget.prototype.findSelectedNode = function(node) {
          if (this.selectedNodeId == node.id) {
            return node;
          }

          for (var i = 0; i < node.children.length; i++) {
            var child = this.findSelectedNode(node.children[i]);
            if (!!child) {
              return child;
            }
          }
          return undefined;
        };
        Gadget.prototype.findNode = function(node, x, y) {
          if (node.view.x <= x
              && (node.view.x + this.nodeWidth(node) + 2 * DRAW_CONSTS.NODE_PADDING >= x)) {
            if (node.view.y <= y && (node.view.y + DRAW_CONSTS.NODE_HEIGHT) >= y) {
              return node;
            }
          }
        
          // TODO: trim the search by looking at level widths and subtree heights
          for (var i = 0; i < node.children.length; i++) {
            var child = this.findNode(node.children[i], x, y);
            if (!!child) {
              return child;
            }
          }
          return undefined;
        };
        Gadget.prototype.buildControls = function(node) {
          this.controls =
              new Array(
                  CONTROL_BUILDERS['add_child'](this, node),
                  CONTROL_BUILDERS['add_sibling'](this, node),
                  CONTROL_BUILDERS['remove_node'](this, node)
              );
        };

        // Storage

        Gadget.prototype.submitNodeUpdateDelta = function(node) {
          log(['submitting node update delta {', node.id, ': "', node.text, '"}'].join(' '));
          var nodeUpdate = {};
          nodeUpdate[node.id] = node.serialize();
          wave.getState().submitDelta(nodeUpdate);          
        };
        Gadget.prototype.serialize = function(node) {
          if (node.children.length > 0) {
            for (var i = 0; i < node.children.length; i++) {
              this.serialize(node.children[i]);
            }
          }
          this.submitNodeUpdateDelta(node);
        };
        Gadget.prototype.deserialize = function(nodeId, parentNode, stringValue) {
          var parts = stringValue.split(';');
          var text = parts[0];
          var childrenIds = parts[1].split(',');
          var children = new Array();
          var node = new Node(nodeId, text, parentNode, children);
          for (var i = 0; i < childrenIds.length; i++) {
            var childId = childrenIds[i].trim();
            if (childId == null || childId === '') {
              continue;
            }
            var childValue = wave.getState().get(childId);
            var child = this.deserialize(childId, node, childValue);
            children.push(child);
          }
          return node;
        };
        Gadget.prototype.generateNodeId = function() {
          var timestamp = new Date().getTime();
          var participantId = wave.getViewer().getId();
          return participantId + '_' + timestamp;
        };
        Gadget.prototype.generateNodeSelectionKey = function(participant) {
          return STATE_VALUE_KEYS.SELECTED_NODE_PREFIX + participant.getId();
        };

        // User actions

        Gadget.prototype.registerListeners = function() {
          this.canvas.addEventListener('click', bind(this.canvasClicked, this), false);
          this.canvas.addEventListener('dblclick', bind(this.canvasDoubleClicked, this), false);
          this.nodeInput.addEventListener('keyup', bind(this.nodeInputKeyUp, this), false);
        };
        Gadget.prototype.canvasClicked = function(event) {
          // firefox: log('layerX: ' + event.layerX + 'layerY: ' + event.layerY);
          // opera: log('offsetX: ' + event.offsetX + 'offsetY: ' + event.offsetY);
          // ?: log('offsetLeft: ' + event.offsetLeft + 'offsetTop: ' + event.offsetTop);
          var horizontalScrollOffset = document.getElementById('scrollingContainer').scrollLeft;
          var x = event.layerX + horizontalScrollOffset;
          var y = event.layerY;
          // First check if a control was clicked, and if so apply it.
          for (var i = 0; i < this.controls.length; i++) {
            var control= this.controls[i];
            if (control.isInside(x, y)) {
              control.command();
              return;
            }
          }

          // Check if a node was clicked to select it.
          var node = this.findNode(this.treeRoot, x, y);
          if (!node) {
            this.cancelEdition();
            return;
          }
          this.selectNode(node);
        };
        Gadget.prototype.canvasDoubleClicked = function(event) {
          var horizontalScrollOffset = document.getElementById('scrollingContainer').scrollLeft;
          var x = event.layerX + horizontalScrollOffset;
          var y = event.layerY;
          var node = this.findNode(this.treeRoot, x, y);
          if (!node) {
            this.cancelEdition();
            return;
          }
          this.editNode(node);
        };
        Gadget.prototype.addChild = function(parentNode) {
          var newNode = new Node(this.generateNodeId(), 'new', parentNode);
          parentNode.children.push(newNode);
          this.serialize(parentNode);
        };
        Gadget.prototype.addSibling = function(node) {
          this.addChild(node.parentNode);
        };
        Gadget.prototype.removeNode = function(node) {
          if (node === this.treeRoot) {
            return;
          }

          // Remove children.
          for (var i = 0; i < node.children.length; i++) {
            this.removeNode(node.children[i]);
          }

          // Update parent node's list of children.
          var parentNode = node.parentNode;
          var updatedChildren = new Array();
          for (var i = 0; i < parentNode.children.length; i++) {
            var child = parentNode.children[i];
            if (child.id != node.id) {
              updatedChildren.push(child);
            }
          }
          parentNode.children = updatedChildren;
          var delta = {};
          delta[node.id] = null;
          delta[parentNode.id] = parentNode.serialize();
          wave.getState().submitDelta(delta);

          // TODO: I'm pretty sure that submitting deltas for the same node (while updating node B
          // as a child of A and parent of C when A gets removed, for instance) is causing ghost
          // nodes to linger in the state. Need to move to a non-recursive model or at least pass
          // the delta map down so that a single delta gets submitted for operations affecting
          // multiple nodes.

          this.selectNode(parentNode);
        };
        Gadget.prototype.selectNode = function(node) {
          var viewer = wave.getViewer();
          var selectionKey = this.generateNodeSelectionKey(viewer);
          wave.getState().submitValue(selectionKey, node.id);
        };
        Gadget.prototype.cancelEdition = function() {
          this.nodeInput.style.display = 'none';
          this.nodeInput.value = '';
        };
        Gadget.prototype.editNode = function(node) {
          var contentsDiv = document.getElementById('contents');
  
          // Styling and positioning
          this.nodeInput.type = 'text';
          var horizontalScrollOffset = document.getElementById('scrollingContainer').scrollLeft;
          this.nodeInput.style.left = (node.view.x - horizontalScrollOffset) + 'px';
          this.nodeInput.style.top = node.view.y + 'px';
          this.nodeInput.style.display = 'block';
          this.nodeInput.size = node.text.length;
          this.nodeInput.value = node.text;
        
          this.currentEditNode = node;
        
          this.nodeInput.focus();
        };
        Gadget.prototype.nodeInputKeyUp = function(event) {
          if (event.keyCode == KEY_CODES.ENTER) {
            if (!this.currentEditNode) {
              return;
            }
            this.nodeInput.style.display = 'none';
            this.currentEditNode.text = this.nodeInput.value;
            this.submitNodeUpdateDelta(this.currentEditNode);
          }
        };

        // Rendering

        Gadget.prototype.render = function() {
          this.renderTree();
          this.renderControls();
          gadgets.window.adjustHeight();  
        };
        Gadget.prototype.renderTree = function() {
          this.buildView(this.treeRoot, 0, 0);

          // Adjust canvas to fit current view.
          this.adjustCanvas();

          // Render the graph.
          this.renderNode(this.treeRoot);
        };
        Gadget.prototype.renderControls = function() {
          if (!this.selectedNodeId) {
            return;
          }

          var selectedNode = this.findSelectedNode(this.treeRoot);
          if (!selectedNode) {
            // TODO: someone deleted a node this viewer had selected, need to handle that
            this.selectedNodeId = undefined;
            return;
          }

          // Adjust control positioning according to current state.
          this.buildControls(selectedNode);

          // Highlight selected node.
          this.canvasContext.save();
          this.canvasContext.strokeStyle = 'rgb(255, 140, 0)';
          this.canvasContext.strokeRect(
              selectedNode.view.x - DRAW_CONSTS.NODE_HIGHLIGHT_OFFSET,
              selectedNode.view.y - DRAW_CONSTS.NODE_HIGHLIGHT_OFFSET,
              selectedNode.view.width + 2 * DRAW_CONSTS.NODE_HIGHLIGHT_OFFSET,
              selectedNode.view.height + 2 * DRAW_CONSTS.NODE_HIGHLIGHT_OFFSET);
          this.canvasContext.restore();
          
          // Actually render controls.
          for (var i = 0; i < this.controls.length; i++) {
            var control = this.controls[i];
            if (control.name == 'add_child' || control.name == 'add_sibling') {
              this.renderAddChildControl(control);
            } else if (control.name == 'remove_node') {
              this.renderRemoveNodeControl(control);
            }
          }
        };
        Gadget.prototype.renderAddChildControl = function(control) {
          this.canvasContext.save();

          this.canvasContext.fillStyle = 'rgb(0, 100, 0)';
          this.canvasContext.beginPath();
          this.canvasContext.arc(control.x, control.y, control.radius, 0, 360, false);
          this.canvasContext.fill();
          this.canvasContext.closePath();
  
          this.canvasContext.strokeStyle = 'rgb(255, 255, 255)';
          this.canvasContext.beginPath();
          this.canvasContext.moveTo(control.x - 2, control.y);
          this.canvasContext.lineTo(control.x + 2, control.y);
          this.canvasContext.moveTo(control.x, control.y - 2);
          this.canvasContext.lineTo(control.x, control.y + 2);
          this.canvasContext.stroke();
          this.canvasContext.closePath();

          this.canvasContext.restore();
        };
        Gadget.prototype.renderRemoveNodeControl = function(control) {
          this.canvasContext.save();
          
          this.canvasContext.fillStyle = 'rgb(255, 0, 0)';
          this.canvasContext.beginPath();
          this.canvasContext.arc(control.x, control.y, control.radius, 0, 360, false);
          this.canvasContext.fill();
          this.canvasContext.closePath();
  
          this.canvasContext.strokeStyle = 'rgb(255, 255, 255)';
          this.canvasContext.beginPath();
          this.canvasContext.moveTo(control.x - 2, control.y - 2);
          this.canvasContext.lineTo(control.x + 2, control.y + 2);
          this.canvasContext.moveTo(control.x - 2, control.y + 2);
          this.canvasContext.lineTo(control.x + 2, control.y - 2);
          this.canvasContext.stroke();
          this.canvasContext.closePath();

          this.canvasContext.restore();
        };
        Gadget.prototype.adjustCanvas = function() {
          this.clearCanvas();
          this.canvasContext.fillStyle = this.canvasContext.strokeStyle = 'rgb(0, 0, 0)';

          var canvasHeight = this.treeRoot.view.levelHeight;
          this.canvas.height = canvasHeight;
          var canvasWidth = this.findCanvasWidth(this.treeRoot);
          this.canvas.width = canvasWidth;

          // Viewport border
          this.canvasContext.strokeRect(0, 0, canvasWidth, canvasHeight);
        };
        Gadget.prototype.findCanvasWidth = function(node) {
          var nodeRight = node.view.width + node.view.x;
          var furthestRightLimit = nodeRight;
          for (var i = 0; i < node.children.length; i++) {
            var childRight = this.findCanvasWidth(node.children[i]);
            if (childRight > furthestRightLimit) {
              furthestRightLimit = childRight;
            }
          }
          return furthestRightLimit;
        };
        Gadget.prototype.buildView = function(node, levelLeft, levelTop) {
          var width = this.nodeWidth(node) + 2 * DRAW_CONSTS.NODE_PADDING;
          if (node.children.length == 0) {
            node.view = new NodeView(levelLeft, levelTop, width, DRAW_CONSTS.NODE_HEIGHT,
                DRAW_CONSTS.NODE_HEIGHT);
            return;
          }
          var levelWidth = 0;
          for (var i = 0; i < node.children.length; i++) {
            levelWidth = Math.max(levelWidth, this.nodeWidth(node.children[i]));
          }
          var verticalCursor = levelTop;
          var horizontalSpacing = DRAW_CONSTS.LEVEL_HORIZ_SPACING + 2 * DRAW_CONSTS.NODE_PADDING;
          for (var i = 0; i < node.children.length; i++) {
            this.buildView(node.children[i], levelLeft + levelWidth + horizontalSpacing,
                verticalCursor);
            verticalCursor += node.children[i].view.levelHeight + DRAW_CONSTS.LEVEL_VERT_SPACING;
          }
          var levelHeight = verticalCursor - levelTop;
          var nodeTop = levelTop + (levelHeight / 2) - (DRAW_CONSTS.NODE_HEIGHT / 2);
          var margin = (levelWidth - width) / 2;
          
          node.view = new NodeView(levelLeft + margin, nodeTop, width, DRAW_CONSTS.NODE_HEIGHT,
              levelHeight); 
        };
        Gadget.prototype.renderNode = function(node) {
          this.canvasContext.fillStyle = 'rgb(0, 0, 0)';
          this.canvasContext.textBaseline = 'top';
          this.canvasContext.fillText(node.text, node.view.x + DRAW_CONSTS.NODE_PADDING, 
              node.view.y + DRAW_CONSTS.NODE_PADDING);
          this.canvasContext.strokeRect(node.view.x, node.view.y, node.view.width,
              node.view.height);

          for (var i = 0; i < node.children.length; i++) {
            this.renderNode(node.children[i]);
          }

          for (var i = 0; i < node.children.length; i++) {
            this.renderEdge(node, node.children[i]);
          }
        };
        Gadget.prototype.renderEdge = function(n1, n2) {
          var x1 = n1.view.x + n1.view.width;
          var y1 = n1.view.y + n1.view.height / 2;
          var x2 = n2.view.x;
          var y2 = n2.view.y + n2.view.height / 2;
  
          var dcpy = 5;
          if (y2 < y1) {
            dcpy *= -1;
          }

          this.canvasContext.strokeStyle = 'rgb(0, 0, 0)';
          this.canvasContext.beginPath();
          this.canvasContext.moveTo(x1, y1);
          this.canvasContext.bezierCurveTo(x1 + 10, y1, x2 - 10, y2 + dcpy, x2, y2);
          this.canvasContext.stroke();
          this.canvasContext.closePath();
        };
        Gadget.prototype.clearCanvas = function() {
          this.canvasContext.fillStyle = 'rgb(255,255,255)';
          this.canvasContext.fillRect(0, 0, this.canvas.width, this.canvas.height);
        };
        Gadget.prototype.nodeWidth = function(node) {
          return this.canvasContext.measureText(node.text).width;
        };

        // Debug helpers

        Gadget.prototype.debugResetState = function() {
          wave.getState().reset();
          this.controls = new Array();
        };
        Gadget.prototype.debugPrintState = function() {
          var keys = wave.getState().getKeys();  
          for (var i = 0; i < keys.length; i++) {
            log(keys[i] + ': ' + wave.getState().get(keys[i]));
          }
        };
        
        // ---------------------------------------------------------------------
        // Gadget initialization
        // ---------------------------------------------------------------------
        function init() {
          if (!wave || !wave.isInWaveContainer()) {
            return;
          }
          var gadget = new Gadget();
          gadget.registerListeners();
          wave.setStateCallback(gadget.stateUpdated, gadget);
        
          document.getElementById('debugReset').addEventListener(
              'click', bind(gadget.debugResetState, gadget), false);
          document.getElementById('clearConsole').addEventListener(
              'click', function() {document.getElementById('console').innerHTML = '';}, false);
        }
        
        // TODO: use minimessage
        function log(message) {
          var console = document.getElementById('console');
          var logEntry = document.createElement('div');
          logEntry.innerHTML = message;
          console.appendChild(logEntry);
        }
        function toggleDebugVisibility() {
          var debugConsole = document.getElementById('debug');
          var visibility = debugConsole.style.display;
          debugConsole.style.display = (visibility == 'none') ? 'block' : 'none';
        }
        
        gadgets.util.registerOnLoadHandler(init);
      </script>
    ]]>
  </Content>
</Module>
